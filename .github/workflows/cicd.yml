name: Build & Deploy

on:
  push:
    branches:
      - main  # Adjust branch name as per your main branch

jobs:
  build-deploy:
    name: Build & Deploy CustomerPortal Server
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Setup JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      # Step 3: Build the application using Maven
      - name: Build with Maven
        run: mvn clean package --no-transfer-progress

      # Step 4: Generate Docker Image Tag
      - name: Generate Docker Image Tag
        id: vars
        run: |
          IST_DATE=$(TZ='Asia/Kolkata' date +'%Y%m%d%H%M')
          echo "TAG=$IST_DATE" >> $GITHUB_ENV
          
      # Step 5: Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # Step 6: Build and Push Docker Image To Docker Hub
      - name: Build and Push Docker Image To Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: .
          dockerfile: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/cpe:${{ env.TAG }}
          
      # Step 7: Configure AWS CLI
      #- name: Configure AWS CLI
      #  uses: aws-actions/configure-aws-credentials@v2
      #  with:
      #    aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #    aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #    aws-region: ${{ secrets.AWS_REGION }}
          
      # Step 8: Enable SSH access
      #- name: Enable SSH Access
      #  run: |
      #    aws ec2 authorize-security-group-ingress --group-id ${{ secrets.SECURITY_GROUP_ID }} --protocol tcp --port 22 --cidr 0.0.0.0/0

      # Step 9: Deploy to Server
      - name: Deploy to Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/cpe:${{ env.TAG }}
            docker stop cpe || true && docker rm cpe || true
            docker run -d --name cpe -p 8445:8080 ${{ secrets.DOCKER_HUB_USERNAME }}/cpe:${{ env.TAG }}
            
      # Step 10: Disable SSH access
      #- name: Disable SSH Access
      #  run: |
      #    aws ec2 revoke-security-group-ingress --group-id ${{ secrets.SECURITY_GROUP_ID }} --protocol tcp --port 22 --cidr 0.0.0.0/0